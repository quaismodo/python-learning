# Словари

# ОПРЕДЕЛЕНИЕ
# Словари - это наборы объектов, доступ к которым осущесвляется не по индексу, а по ключу.
# Элементы словаря располагаются в произвольно порядке. Чтобы получить элемент, необходимо
# указать ключ, который использовался при сохранении значения.

# Функции, предназначенные для работы с последовательностями, к словарям не применимы!

# СОЗДАНИЕ СЛОВАРЯ
d = dict()  # Создали пустой словарь
print(d)  # >> {}
d = dict({'a': 1, 'b': 2})  # Словарь
print(d)
d = dict([('a', 1), ('b', 2)])  # Список кортежей
print(d)
d = dict([['a', 1], ['b', 2]])  # Список списков
print(d)

k = ['a', 'b']
v = [1, 2]
print(list(zip(k, v)))  # Создание списка кортежей
d = dict(zip(k, v))  # Создание словаря
print(d)

# Метод get(<Ключ>[, <Значение по умолчанию>]) позволяет избежать возбуждения
# исключения KeyError при отсутствии в словаре указанного ключа
print(d.get('a'), d.get('b'), d.get('c'))

# Метод setdefault(<Ключ>[, <Значение по умолчанию>]) возвращает значение, соответствующее
# этому ключу. Если ключ отсутствует, в словаре создается новый элемент со значением,
# указанным во втором параметре. Если параметр не указан, значеним будет None
d = {'a': 1, 'b': 2}
d.setdefault('a')
d.setdefault('c')
d.setdefault('d', 5)
print(d)

# Генераторы словарей
# 1 - Выражение заключается в фигурные скобки
# 2 - Внутри выражения перед циклом for указываются два значения через двоеточие, а не одно.
keys = ['a', 'b']
values = [1, 2]
dict_arr = {k: v for (k, v) in zip(keys, values)}
print(dict_arr)
